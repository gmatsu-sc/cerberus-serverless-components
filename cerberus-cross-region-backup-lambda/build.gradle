version '1.0.0'

shadowJar {
    baseName = 'cerberus-cross-region-backup-lambda'
    classifier = null
}

def awsSdkVersion = '1.11.118'

dependencies {
    // Groovy stuffs
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'

    // http client
    compile 'com.squareup.okhttp3:okhttp:3.6.0'

    // Lambda logger impl
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.0'

    compile group: 'com.amazonaws', name: 'aws-java-sdk-kms', version: "${awsSdkVersion}"
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: "${awsSdkVersion}"
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: "${awsSdkVersion}"
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sns', version: "${awsSdkVersion}"

    // Test deps
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

'aws-sam-deployer' {
    region = 'THE REGION THAT YOU WANT TO RUN THE LAMBDA IN, THE BELOW BUCKET NEEDS TO BE IN THAT REGION TOO'
    s3Bucket = 'A-BUCKET-THAT-YOUR-CURRENT-AWS-CREDS-CAN-WRITE-TOO'
    s3Prefix = 'lambda-uploads'
    stackName = "burdz-cerberus-cross-region-backup"
    samTemplatePath = "${project.projectDir}${File.separator}application.yaml"
    tokenArtifactMap = [
            '@@CODE_URI@@': "${project.buildDir}${File.separator}libs${File.separator}${project.getName()}-${version}.jar"
    ]
    parameterOverrides = [
            Environment: 'THE ENVIRONMENT YOU ARE BACKING UP',
            CerberusUrl: 'THE CERBERUS URL',
            AdminUserArn: 'THE ROLE OR USER ARN THAT YOU RUN THE CLI AS',
    ]
}